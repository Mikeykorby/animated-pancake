-- MEMORY SETUP -- 
local memory = {}

-- Add the memory of the current conversation
local function addToMemory(message, response)
    table.insert(memory, {message = message, response = response})
end

-- Reset memory function
local function resetMemory()
    memory = {}
    warn("Memory has been reset!")
end

local AI_ACTIVE = true  -- Flag to turn AI on and off
local CLOSE_RANGE_ONLY = true

_G.MESSAGE_SETTINGS = {
    ["MINIMUM_CHARACTERS"] = 1,
    ["MAXIMUM_CHARACTERS"] = 200,
    ["MAXIMUM_STUDS"] = 11,
}

_G.WHITELISTED = { -- Only works if CLOSE_RANGE_ONLY is disabled
    ["seem2006"] = true,
}

_G.BLACKLISTED = { -- Only works if CLOSE_RANGE_ONLY is enabled
    ["Builderman"] = true,
}

_G.AI_PREFIX = "[oLLama AI]" -- Customizable message prefix
_G.PLAYER_NAME_FORMAT = "P" -- Default player name format (just 'P')
_G.NAME_SEPARATOR = ","  -- Default separator (can be comma or colon)

-- GUI SETUP --
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "PersistentScreenGui"
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
screenGui.ResetOnSpawn = false

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 400, 0, 250)  -- Reverted size of the main UI frame
frame.Position = UDim2.new(0.5, -200, 0.5, -125)
frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)  -- Darker background
frame.BackgroundTransparency = 0.5
frame.Parent = screenGui

local toggleButton = Instance.new("TextButton")
toggleButton.Size = UDim2.new(0, 200, 0, 40)  -- Smaller button size
toggleButton.Position = UDim2.new(0.5, -100, 0.5, -75)
toggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 255)
toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleButton.Text = "Turn AI OFF"
toggleButton.Font = Enum.Font.Gotham
toggleButton.TextSize = 20
toggleButton.Parent = frame

local settingsButton = Instance.new("TextButton")
settingsButton.Size = UDim2.new(0, 200, 0, 40)  -- Smaller button size
settingsButton.Position = UDim2.new(0.5, -100, 0.5, 25)
settingsButton.BackgroundColor3 = Color3.fromRGB(50, 50, 255)
settingsButton.TextColor3 = Color3.fromRGB(255, 255, 255)
settingsButton.Text = "Settings"
settingsButton.Font = Enum.Font.Gotham
settingsButton.TextSize = 20
settingsButton.Parent = frame

local closeButton = Instance.new("TextButton")
closeButton.Size = UDim2.new(0, 30, 0, 30)
closeButton.Position = UDim2.new(1, -35, 0, -35)
closeButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
closeButton.Text = "X"
closeButton.Font = Enum.Font.Gotham
closeButton.TextSize = 16
closeButton.Parent = frame

local settingsFrame = Instance.new("Frame")
settingsFrame.Size = UDim2.new(0, 420, 0, 360)  -- Slightly bigger size to accommodate the reset memory option
settingsFrame.Position = UDim2.new(0.5, -210, 0.5, -160)
settingsFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)  -- Darker background
settingsFrame.BackgroundTransparency = 0.5
settingsFrame.Visible = false
settingsFrame.Parent = screenGui

local aiToggleButton = Instance.new("TextButton")
aiToggleButton.Size = UDim2.new(0, 200, 0, 40)  -- Smaller button size
aiToggleButton.Position = UDim2.new(0.5, -100, 0.5, -120)
aiToggleButton.BackgroundColor3 = Color3.fromRGB(50, 255, 50)
aiToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
aiToggleButton.Text = "Toggle AI"
aiToggleButton.Font = Enum.Font.Gotham
aiToggleButton.TextSize = 20
aiToggleButton.Parent = settingsFrame

local resetButton = Instance.new("TextButton")
resetButton.Size = UDim2.new(0, 200, 0, 40)  -- Smaller button size
resetButton.Position = UDim2.new(0.5, -100, 0.5, -70)
resetButton.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
resetButton.TextColor3 = Color3.fromRGB(255, 255, 255)
resetButton.Text = "Reset Memory"
resetButton.Font = Enum.Font.Gotham
resetButton.TextSize = 20
resetButton.Parent = settingsFrame

-- TextBox to customize the player's name format --
local nameFormatInput = Instance.new("TextBox")
nameFormatInput.Size = UDim2.new(0, 200, 0, 40)  -- Smaller TextBox size
nameFormatInput.Position = UDim2.new(0.5, -100, 0.5, 20)
nameFormatInput.BackgroundColor3 = Color3.fromRGB(100, 100, 255)
nameFormatInput.TextColor3 = Color3.fromRGB(255, 255, 255)
nameFormatInput.Text = _G.PLAYER_NAME_FORMAT  -- Default name format
nameFormatInput.Font = Enum.Font.Gotham
nameFormatInput.TextSize = 20
nameFormatInput.ClearTextOnFocus = false
nameFormatInput.Parent = settingsFrame

-- Dropdown to choose separator (Comma or Colon)
local separatorDropdown = Instance.new("TextButton")
separatorDropdown.Size = UDim2.new(0, 200, 0, 40)  -- Smaller button size
separatorDropdown.Position = UDim2.new(0.5, -100, 0.5, 70)
separatorDropdown.BackgroundColor3 = Color3.fromRGB(100, 255, 100)
separatorDropdown.TextColor3 = Color3.fromRGB(255, 255, 255)
separatorDropdown.Text = "Select Separator: Comma"
separatorDropdown.Font = Enum.Font.Gotham
separatorDropdown.TextSize = 20
separatorDropdown.Parent = settingsFrame

-- Checkbox to toggle the player's name prefix
local toggleNamePrefixButton = Instance.new("TextButton")
toggleNamePrefixButton.Size = UDim2.new(0, 200, 0, 40)  -- Smaller button size
toggleNamePrefixButton.Position = UDim2.new(0.5, -100, 0.5, 120)
toggleNamePrefixButton.BackgroundColor3 = Color3.fromRGB(255, 255, 50)
toggleNamePrefixButton.TextColor3 = Color3.fromRGB(0, 0, 0)
toggleNamePrefixButton.Text = "Disable Name Prefix"
toggleNamePrefixButton.Font = Enum.Font.Gotham
toggleNamePrefixButton.TextSize = 20
toggleNamePrefixButton.Parent = settingsFrame

-- DRAGGING FUNCTIONALITY --
local dragging = false
local dragInput, dragStart, startPos

frame.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = frame.Position
    end
end)

frame.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)

frame.InputChanged:Connect(function(input)
    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

local settingsDragging = false
local settingsDragInput, settingsDragStart, settingsStartPos

settingsFrame.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        settingsDragging = true
        settingsDragStart = input.Position
        settingsStartPos = settingsFrame.Position
    end
end)

settingsFrame.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        settingsDragging = false
    end
end)

settingsFrame.InputChanged:Connect(function(input)
    if settingsDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Position - settingsDragStart
        settingsFrame.Position = UDim2.new(settingsStartPos.X.Scale, settingsStartPos.X.Offset + delta.X, settingsStartPos.Y.Scale, settingsStartPos.Y.Offset + delta.Y)
    end
end)

-- SETTINGS HANDLERS --

local function toggleFrameVisibility()
    settingsFrame.Visible = not settingsFrame.Visible
end

local function toggleAI()
    AI_ACTIVE = not AI_ACTIVE
    toggleButton.Text = AI_ACTIVE and "Turn AI OFF" or "Turn AI ON"
end

settingsButton.MouseButton1Click:Connect(function()
    toggleFrameVisibility()
end)

closeButton.MouseButton1Click:Connect(function()
    screenGui:Destroy()
end)

aiToggleButton.MouseButton1Click:Connect(function()
    toggleAI()
end)

resetButton.MouseButton1Click:Connect(function()
    _G.PLAYER_NAME_FORMAT = "P"
    nameFormatInput.Text = _G.PLAYER_NAME_FORMAT
    resetMemory()  -- Reset memory when reset button is clicked
end)

-- Change the player name format dynamically --
nameFormatInput.FocusLost:Connect(function()
    _G.PLAYER_NAME_FORMAT = nameFormatInput.Text
    warn("Player name format updated to: " .. _G.PLAYER_NAME_FORMAT)
end)

-- Handle Separator Dropdown for Comma or Colon --
separatorDropdown.MouseButton1Click:Connect(function()
    _G.NAME_SEPARATOR = (_G.NAME_SEPARATOR == ",") and ":" or ","
    separatorDropdown.Text = "Select Separator: " .. _G.NAME_SEPARATOR
    warn("Separator updated to: " .. _G.NAME_SEPARATOR)
end)

-- Toggle Player Name Prefix --
toggleNamePrefixButton.MouseButton1Click:Connect(function()
    if _G.PLAYER_NAME_FORMAT == "P" then
        _G.PLAYER_NAME_FORMAT = ""
        toggleNamePrefixButton.Text = "Enable Name Prefix"
    else
        _G.PLAYER_NAME_FORMAT = "P"
        toggleNamePrefixButton.Text = "Disable Name Prefix"
    end
    nameFormatInput.Text = _G.PLAYER_NAME_FORMAT
    warn("Player name prefix toggled to: " .. (_G.PLAYER_NAME_FORMAT == "" and "Disabled" or "Enabled"))
end)

-- AI RESPONSE HANDLING --
local chat = function(_string)
    if game.TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        print("FIRING ".._string.."...")
        game.TextChatService.TextChannels.RBXGeneral:SendAsync(_string, "All")
        warn("FIRED!")
    else
        game:GetService('ReplicatedStorage').DefaultChatSystemChatEvents.SayMessageRequest:FireServer(_string, 'All')
    end
end

-- Handling the response from AI --
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local OnMessageDoneFiltering = ReplicatedStorage:WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("OnMessageDoneFiltering")
local LocalPlayer = Players.LocalPlayer
local Debounce = false

local RequestFunction = syn and syn.request or request

local function MakeRequest(Prompt)
    return RequestFunction({
        Url = "http://localhost:11434/api/generate",
        Method = "POST",
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = game:GetService("HttpService"):JSONEncode({
            model = "llama3.1", 
            prompt = Prompt,
            stream = false
        })
    })
end

OnMessageDoneFiltering.OnClientEvent:Connect(function(Table)
    if not AI_ACTIVE then return end -- Skip if AI is off
    local Message, Instance = Table.Message, Players:FindFirstChild(Table.FromSpeaker)
    local Character = Instance and Instance.Character

    if Instance == LocalPlayer or string.match(Message, "#") or not Character or not Character:FindFirstChild("Head") or not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("Head") then return end
    if Debounce or #Message < _G.MESSAGE_SETTINGS["MINIMUM_CHARACTERS"] or #Message > _G.MESSAGE_SETTINGS["MAXIMUM_CHARACTERS"] then return end
    if CLOSE_RANGE_ONLY then 
        if _G.BLACKLISTED[Instance.Name] or (Character.Head.Position - LocalPlayer.Character.Head.Position).Magnitude > _G.MESSAGE_SETTINGS["MAXIMUM_STUDS"] then return end
    elseif not _G.WHITELISTED[Instance.Name] then return end

    Debounce = true

    local HttpRequest = MakeRequest(_G.AI_PREFIX.." (note: dont use any line breaks and keep the messages shorter) "..Message)
    print("["..Instance.Name.."]: "..Message)
    local Response = ""
    if HttpRequest.StatusCode == 200 then
        local responseData = game:GetService("HttpService"):JSONDecode(HttpRequest.Body)
        local actualResponse = responseData.response

        if actualResponse == nil then
            warn("fix your script: response is nil")
        else 
            -- Use the custom name format and separator here
            local playerName = _G.PLAYER_NAME_FORMAT == "P" and Instance.Name or (_G.PLAYER_NAME_FORMAT == "" and "" or _G.PLAYER_NAME_FORMAT)
            Response = playerName .. (_G.PLAYER_NAME_FORMAT == "" and "" or _G.NAME_SEPARATOR) .. " " .. actualResponse
            warn(_G.AI_PREFIX.." "..Response)
        end
    else
        warn("Request failed with status code: " .. HttpRequest.StatusCode)
    end

    chat(string.sub(Response, 1, 128))
    delay(1, function()
        chat(string.sub(Response, 129))
        wait()
        Debounce = false
    end)
end)

warn("Script has been executed with success.")
chat(_G.AI_PREFIX.." Llama 3.1 Model Loaded!")
